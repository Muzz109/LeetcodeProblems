Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?
-----------------------------------------------------------------------------------------------------
Iterative approach -- we use reversal of pointers

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function(head) {
    
    let next = null;
    let prev = null;
    let curr = head;
    
    while(curr != null){
        
        next = curr.next; // point to next
        curr.next = prev;   // point to the prev reverse 1 step at a time
        prev = curr;         // point prev to the curr value
        curr = next         // point 
    }
    
    return prev
};

